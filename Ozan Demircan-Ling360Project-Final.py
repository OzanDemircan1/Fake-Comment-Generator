# -*- coding: utf-8 -*-
"""Ozan Demircan-Ling360Project-Final

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Gik-eXtyGCv6K6M6QED0QT4BYeUkNWNV

Fake Comment Generator Using Reddit Corpus

All the work for this program was done by Ozan Demircan.
"""

# Downloading and reading the corpus from the subreddit r/NeutralPolitics using ConvoKit toolkit

!pip install convokit --quiet


from convokit import Corpus, download

corpus = Corpus(filename=download("subreddit-NeutralPolitics"))
corpus.print_summary_stats()

import nltk
from nltk.tokenize import sent_tokenize
from nltk.tokenize import word_tokenize
nltk.download('punkt')

# Cleaning and Tokenizing the Corpus

tokens = []
i=30000
for utt in corpus.iter_utterances():
    i -= 1
    comment_tokenized = []
    sentences = sent_tokenize(utt.text)
    if(utt.text != "[Deleted]" and utt.text != "[Removed]"):
        for s in sentences:
            s_tokenized = word_tokenize(s)
            tokens += ["<s>"]+s_tokenized+["</s>"]
        if(i==0):
            break

# We need everything in lower case for Gensim to work
tokens = [i.lower() for i in tokens]
print(tokens[:100])

# Defining a function to Generate the Comments

def CommentGenerator(max_token_count=200, starter = ""):

    comment = ""
    from itertools import chain 
    from scipy import stats
    import re

    comment += "<s>"
    current_phrase = ("<s>",starter)
    trigrams = [((tokens[i],tokens[i+1]), tokens[i+2]) for i in range(len(tokens)-2)]
    trigram_cfd = nltk.ConditionalFreqDist(trigrams)
    trigram_pbs = nltk.ConditionalProbDist(trigram_cfd, nltk.MLEProbDist)
    for i in range(max_token_count+1):
      comment += current_phrase[1] + " "
      probable_words = list(trigram_pbs[current_phrase].samples())
      word_probabilities = [trigram_pbs[current_phrase].prob(word) for word in probable_words]
      if not word_probabilities:
        return "Possible trigram not found!"
      result = stats.multinomial.rvs(1,word_probabilities)
      index_of_probable_word = list(result).index(1)
      current_phrase = (current_phrase[1],(probable_words[index_of_probable_word]))
      
    comment = re.sub("<s>", "", comment)
    comment = re.sub("</s>", "", comment)  
    
    return comment

# Importing Gensim and downloading a ready dataset

import gensim.downloader
glove_vectors = gensim.downloader.load('glove-twitter-25')

# Getting related keywords using Gensim and calling the function to generate the comments
input_text = input("Enter the topic you want comments on:")
most_related = glove_vectors.most_similar(input_text)
keywords = [keyword[0] for keyword in most_related[:5]]
print(keywords)
example_comments = [CommentGenerator(max_token_count=50, starter = keyword) for keyword in keywords]
print(example_comments)

# Grammar Correction

!pip install --quiet GingerIt

from gingerit.gingerit import GingerIt

# Creating a GingerIt instance
parser = GingerIt()

# Defining a function to check the grammar of a sentence and return the corrected sentence
def check_grammar(sentence):
    result = parser.parse(sentence)
    corrected_sentence = result['result']
    return corrected_sentence

corrected_comments = []
for comment in example_comments:
    corrected_sentence = check_grammar(comment)
    print("Corrected sentence:", corrected_sentence)
    corrected_comments.append(corrected_sentence)

example_comments = corrected_comments

# Downloading the necessary resources for sentiment analysis
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer

nltk.download('vader_lexicon')

sia = SentimentIntensityAnalyzer()

# Defining a function to analyze the positivity of a comment
def analyze_positivity(text):
    scores = sia.polarity_scores(text)
    return scores

# Evaluating the comments using a Sentiment analyzer in NLTK

sentiment_scores = [analyze_positivity(text) for text in example_comments]
print(sentiment_scores)
for i in range(len(sentiment_scores)):
    if (sentiment_scores[i]["compound"] > 0):
      print(i,":",example_comments[i],":Comment is positive.")
    elif(sentiment_scores[i]["compound"] < 0):
      print(i,":",example_comments[i],":Comment is negative.")
    else:
      print(i,":",example_comments[i],":Comment is neutral.")